<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

  <!--https://waylau.gitbooks.io/apache-shiro-1-2-x-reference/-->
  <!--
    http://blog.csdn.net/qq_21727627/article/details/72850391
  -->

  <bean id="sysUserRealm" class="com.chengjs.cjsssmsweb.shiro.SysUserRealm">
    <!--配置加密算法-->
    <property name="credentialsMatcher">
      <!--shiro加密策略MD5-->
<!--
      <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="SHA1"/>&lt;!&ndash;加密的策略 MD5 &ndash;&gt;
        <property name="hashIterations" value="10"/>&lt;!&ndash;加密的次数&ndash;&gt;
        <property name="storedCredentialsHexEncoded" value="true"/>
      </bean>
-->

      <bean class="com.chengjs.cjsssmsweb.shiro.CustomCredentialsMatcher"></bean>
    </property>
  </bean>

  <!--================================ securityManager ================================-->

  <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <property name="realm" ref="sysUserRealm"/>
    <!-- DefaultWebSecurityManager 中默认使用servlet session,可查看源码 下面是使用原生session案例-->
    <!-- <property name="sessionMode" value="native"/> -->
  </bean>

  <!--================================ securityManager ================================-->

  <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
  <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

  <!-- 最简单的集成，是将securityManager bean配置成一个静态单例，也就是让SecurityUtils.*
      下的所有方法在任何情况下都起作用。在web应用中不要将securityManager bean配置为静态单例，
      具体方式请参阅下文中的‘Web Application’部分 -->
  <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
    <property name="arguments" ref="securityManager"/>
  </bean>

  <!-- 开启Shiro注解 -->
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
        depends-on="lifecycleBeanPostProcessor"/>
  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    <property name="securityManager" ref="securityManager"/>
  </bean>

  <!-- Shiro过滤器 核心-->
  <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    <property name="securityManager" ref="securityManager"/>

    <property name="loginUrl" value="/login.jsp"/>
    <property name="unauthorizedUrl" value="/nopower.jsp"/>
    <!-- Shiro连接约束配置,即过滤链的定义 -->
    <property name="filterChainDefinitions">
      <value>
        <!--
          1.FIRST MATCH WINS: 先描述的起作用,会短路后续的描述

          2.= 右边是filterChain, 每个过滤器按照它期望的方式自由处理请求，
            custom javax.servlet.Filter 确保过滤器子类在 [main]中被定义
          2.1 default filters:
            anon, authc, authcBasic, logout, noSessionCreation, perms,
            port, rest, roles, ssl, user
        -->

        <!--anon 表示匿名访问，不需要认证以及授权-->
        /sysUser/loginSysUser=anon

        <!--authc表示需要认证 没有进行身份认证是不能进行访问的-->
        /admin*=authc

        /groupleader=roles['groupleader']
        /member=perms["sys_user:create"]

        /**=anon
      </value>
    </property>
  </bean>


  <!--================================ shiro远程调用配置 ================================-->
  <!-- Server-side: Spring远程安全确保每个远程方法调用都与一个负责安全验证的Subject绑定 -->
  <!--
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
      <property name="securityManager" ref="securityManager"/>
    </bean>
  -->
  <!--加入Exporter向外部暴露提供服务,其实现类由具体的远程处理机制和协议决定 即下面someService由程序自行实现-->
  <!--
    <bean name="/someService" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
      <property name="service" ref="someService"/>
      <property name="serviceInterface" value="com.pkg.service.SomeService"/>
      <property name="remoteInvocationExecutor" ref="secureRemoteInvocationExecutor"/>
    </bean>
  -->

  <!--Client-side: 负责鉴别信息的Subject告知Server远程方法发起人-->
  <!--<bean id="secureRemoteInvocationFactory" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationFactory"/>-->
  <!--将SecureRemoteInvocationFactory添加到与协议相关的spring远程ProxyFactoryBean中-->
  <!--下面是基于http协议的远程ProxyFactoryBean案例-->
  <!--
    <bean id="someService" class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
      <property name="serviceUrl" value="http://host:port/remoting/someService"/>
      <property name="serviceInterface" value="com.pkg.service.SomeService"/>
      <property name="remoteInvocationFactory" ref="secureRemoteInvocationFactory"/>
    </bean>
  -->
  <!--================================ shiro远程调用配置 ================================-->


</beans>